{"version":3,"sources":["serviceWorker.js","actions/players.js","reducers/players.js","actions/match.js","utils.js","reducers/match.js","reducers/index.js","store/configureStore.js","components/card/Card.js","components/player/Player.js","components/players_container/PlayersContainer.js","containers/app/App.js","components/score_disp/ScoreDisp.js","containers/match/Match.js","containers/Root.js","index.js"],"names":["Boolean","window","location","hostname","match","GET_PLAYERS","CHANGE_PLAYER_STATUS_FOR_MATCH","getPlayersActionCreator","type","changePlayerStatusMatchActionCreator","id","playerId","initialState","players","name","ranking","weight","height","country","img","isInMatch","RESET_GAME_SCORES","HANDLE_GAME_POINT","ADD_SET_SCORE","ADD_NEW_SETS","END_MATCH","ADD_COMMENTATOR_MESSAGE","CHANGE_GAME_MODE","RESET_MATCH","resetGameScoresActionCreator","handleGamePointActionCreator","playerOrder","increment","addSetScoreActionCreator","addNewSetsActionCreator","endMatchActionCreator","addCommentatorMessageActionCreator","message","changeGameMode","resetMatch","points","checkDeuce","p1GameScore","p2GameScore","checkTieBreak","p1SetScore","p2SetScore","playerWonGame","isPlayerInTieBreak","conditionTieBreak","conditionNormalGame","result","playerWonSet","p1SetsWon","p2SetsWon","playerWonMatch","maxSets","response","console","log","getMessage","messages","Math","floor","random","length","isMatchOver","maxSetNumber","commentatorMessage","player1","gameScore","setScore","player2","rootReducer","combineReducers","state","action","copy","JSON","parse","stringify","findPlayerIndex","findIndex","player","push","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","logger","createLogger","collapsed","configureStore","preloadedState","createStore","applyMiddleware","thunk","Card","this","props","imgSrc","subTitle","className","src","alt","width","React","Component","Player","click","onClick","PlayersContainer","handleClick","isMatch","playersInMatch","filter","checkIfPlayerMatchStatusShouldBeUpdated","title","style","justifyContent","map","index","opacity","key","renderPlayerGrid","renderEmptyPlayersMessage","connect","dispatch","bindActionCreators","playersActions","App","playersForMatch","to","ScoreDisp","sets","set","border","Match","goBack","history","continueGame","p1Order","p2Order","continueSet","order","getPlayersWonSets","p1SetScores","p2SetScores","currentSet","setsWonP1","setsWonP2","winPoint","playerScore","opponent","opponentScore","playerName","showPlayers","showPlayer1","showPlayer2","renderPlayer","hasWon","size","toString","matchActions","Root","store","Route","exact","path","component","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c17fe051.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const GET_PLAYERS = 'GET_PLAYERS';\nexport const CHANGE_PLAYER_STATUS_FOR_MATCH = 'CHANGE_PLAYER_STATUS_FOR_MATCH';\n\nexport const getPlayersActionCreator = () => ({\n    type: GET_PLAYERS,\n});\n\nexport const changePlayerStatusMatchActionCreator = (id) => ({\n    type: CHANGE_PLAYER_STATUS_FOR_MATCH,\n    playerId: id\n});\n","import {CHANGE_PLAYER_STATUS_FOR_MATCH, GET_PLAYERS} from \"../actions/players\";\n\n/**\n * Initial state for the players reducer\n * @type {{players: *[]}}\n */\nconst initialState = {\n    players: [\n        {\n            id: 1,\n            name: \"Roger Federer\",\n            ranking: 1,\n            weight: 80,\n            height: 184,\n            country: \"Switzerland\",\n            img: \"https://www.tennisworldusa.org/imgb/89749/is-wimbledon-2020-the-last-slamchance-for-roger-federer.jpg\",\n            isInMatch: false\n        },\n        {\n            id: 2,\n            name: \"Rafael Nadal\",\n            ranking: 2,\n            weight: 85,\n            height: 186,\n            country: \"Spain\",\n            img: \"https://img.bleacherreport.net/img/images/photos/003/826/651/hi-res-7feb9feca6ff85280c5faebebb9ed3dc_crop_north.jpg?h=533&w=800&q=70&crop_x=center&crop_y=top\",\n            isInMatch: false\n        },\n        {\n            id: 3,\n            name: \"Novak Djokovic\",\n            ranking: 3,\n            weight: 78,\n            height: 110,\n            country: \"Serbia\",\n            img: \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Paris-FR-75-open_de_tennis-31-5-17-Roland_Garros-Novak_Djokovic-13.jpg/1024px-Paris-FR-75-open_de_tennis-31-5-17-Roland_Garros-Novak_Djokovic-13.jpg\",\n            isInMatch: false\n        }\n    ]\n};\n\nexport function players(state = initialState, action) {\n    const {players, playerId} = action;\n    switch (action.type) {\n        case GET_PLAYERS:\n            return {...state, players};\n        case CHANGE_PLAYER_STATUS_FOR_MATCH:\n            let copy = JSON.parse(JSON.stringify(state));\n            let findPlayerIndex = copy.players.findIndex((player) => player.id === playerId);\n            copy.players[findPlayerIndex].isInMatch = !copy.players[findPlayerIndex].isInMatch;\n            return copy;\n        default:\n            return state;\n    }\n}\n","export const RESET_GAME_SCORES = 'RESET_GAME_SCORES';\nexport const HANDLE_GAME_POINT = 'HANDLE_GAME_POINT';\nexport const ADD_SET_SCORE = 'ADD_SET_SCORE';\nexport const ADD_NEW_SETS = 'ADD_NEW_SET';\nexport const END_MATCH = 'END_MATCH';\nexport const ADD_COMMENTATOR_MESSAGE = 'ADD_COMMENTATOR_MESSAGE';\nexport const CHANGE_GAME_MODE = 'CHANGE_GAME_MODE';\nexport const RESET_MATCH = 'RESET_MATCH';\n\nexport const resetGameScoresActionCreator = () => ({\n    type: RESET_GAME_SCORES,\n});\n\nexport const handleGamePointActionCreator = (playerOrder, increment) => ({\n    type: HANDLE_GAME_POINT,\n    playerOrder,\n    increment\n});\n\nexport const addSetScoreActionCreator = (playerOrder, increment) => ({\n    type: ADD_SET_SCORE,\n    playerOrder,\n    increment\n});\n\nexport const addNewSetsActionCreator = () => ({\n    type: ADD_NEW_SETS,\n});\n\nexport const endMatchActionCreator = () => ({\n    type: END_MATCH,\n});\n\nexport const addCommentatorMessageActionCreator = (message) => ({\n    type: ADD_COMMENTATOR_MESSAGE,\n    message\n});\n\nexport const changeGameMode = () => ({\n    type: CHANGE_GAME_MODE\n});\n\nexport const resetMatch = () => ({\n    type: RESET_MATCH\n});\n","export const dummyPlayer = {\n    id: 3,\n    name: \"Novak Djokovic\",\n    ranking: 3,\n    weight: 78,\n    height: 110,\n    country: \"Serbia\",\n    img: \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Paris-FR-75-open_de_tennis-31-5-17-Roland_Garros-Novak_Djokovic-13.jpg/1024px-Paris-FR-75-open_de_tennis-31-5-17-Roland_Garros-Novak_Djokovic-13.jpg\",\n    isInMatch: false\n};\nexport const dummyPlayerInMatch = {\n    id: 3,\n    name: \"Novak Djokovic\",\n    ranking: 3,\n    weight: 78,\n    height: 110,\n    country: \"Serbia\",\n    img: \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Paris-FR-75-open_de_tennis-31-5-17-Roland_Garros-Novak_Djokovic-13.jpg/1024px-Paris-FR-75-open_de_tennis-31-5-17-Roland_Garros-Novak_Djokovic-13.jpg\",\n    isInMatch: true\n};\n\n/**\n * We use this constant as reference of what the current value of the game should be,\n * For instance, if game score = 1, then \"15\" will be displayed.\n * @type {*[]}\n */\nexport const points = [\"0\", \"15\", \"30\", \"40\", \"add\"];\n\nexport const PLAYER1 = \"player1\";\nexport const PLAYER2 = \"player2\";\nexport const DEUCE_MESSAGE = \"There is a Deuce!!\";\n\n/**\n * Check if there exists a deuce between a player and the opponent\n * @param p1GameScore\n * @param p2GameScore\n * @returns {boolean}\n */\nexport const checkDeuce = (p1GameScore, p2GameScore) => {\n    return p1GameScore === 3 && p2GameScore === 4\n};\n\nexport const checkTieBreak = (p1SetScore, p2SetScore) => {\n    return p1SetScore === 6 && p2SetScore === 6\n};\n\n\n/**\n * Check if a player has won a game, this happens when the player reaches 40 points or wins a deuce\n * @param p1GameScore\n * @param p2GameScore\n * @param isPlayerInTieBreak\n * @returns {boolean}\n */\nexport const playerWonGame = (p1GameScore, p2GameScore, isPlayerInTieBreak) => {\n    let result = false;\n    if (!isPlayerInTieBreak) {\n        result = conditionNormalGame(p1GameScore, p2GameScore)\n    } else {\n        result = conditionTieBreak(p1GameScore, p2GameScore)\n    }\n    return result\n};\n\n\n/**\n * Condition to win a normal game\n * @param p1GameScore\n * @param p2GameScore\n * @returns {boolean}\n */\nexport const conditionNormalGame = (p1GameScore, p2GameScore) => {\n    let result = false;\n    if (p1GameScore === 3 && p2GameScore < 3) {\n        result = true\n    } else if (checkDeuce(p2GameScore, p1GameScore)) {\n        result = true\n    }\n    return result\n};\n\n/**\n * Condition to win a tie break\n * @param p1GameScore\n * @param p2GameScore\n * @returns {boolean}\n */\nexport const conditionTieBreak = (p1GameScore, p2GameScore) => {\n    let result = false;\n    if (p1GameScore === 7 && p2GameScore < 5) {\n        result = true\n    } else if (p1GameScore >= 6 && p2GameScore >= 6) {\n        result = p1GameScore - p2GameScore === 2\n    }\n    return result\n};\n\n/**\n * Checks if a player has one a set\n * @param p1SetsWon Number of sets won by player 1\n * @param p2SetsWon Number of sets won by player 2\n * @returns {boolean}\n */\nexport const playerWonSet = (p1SetsWon, p2SetsWon) => {\n    let result = false;\n    if ((p1SetsWon === 6 && p2SetsWon <= 4) || ((p1SetsWon === 7 && p2SetsWon <= 5))) {\n        result = true\n    }\n    return result\n};\n\n/**\n * Checks if a player has one a match\n * @param p1SetsWon Number of sets won by player 1\n * @param p2SetsWon Number of sets won by player 2\n * @param maxSets Maximum number of sets\n * @returns {boolean}\n */\nexport const playerWonMatch = (p1SetsWon, p2SetsWon, maxSets) => {\n    let response = false;\n    if (maxSets === 3) {\n        response = ((p1SetsWon === 2 && p2SetsWon === 0) || (p1SetsWon === 2 && p2SetsWon === 1))\n    } else if (maxSets === 5) {\n        console.log(\"Condition sets 5\");\n        console.log(p1SetsWon)\n        console.log(p2SetsWon)\n\n        response = ((p1SetsWon === 3 && p2SetsWon === 0) || (p1SetsWon === 4 && p2SetsWon === 1) || (p1SetsWon === 3 && p2SetsWon === 2))\n        console.log(response)\n    }\n    return response\n};\n\n/**\n * Get message when a player wins a game\n * @param name, Player's name\n * @returns {*}\n */\nexport const getMessage = (name) => {\n    const message1 = \"Great shot by \" + name + \"!!!\";\n    const message2 = \"Amazing right hand by \" + name + \"!!!\";\n    const message3 = \"\" + name + \" is on fire!\";\n    const message4 = \"\" + name + \"'s backhand is remarkable!\";\n    const messages = [message1, message2, message3, message4];\n    return messages[Math.floor(Math.random() * messages.length)]\n};\n","import {\n    ADD_COMMENTATOR_MESSAGE,\n    ADD_NEW_SETS,\n    ADD_SET_SCORE, CHANGE_GAME_MODE,\n    END_MATCH,\n    HANDLE_GAME_POINT,\n    RESET_GAME_SCORES, RESET_MATCH\n} from \"../actions/match\";\nimport {PLAYER1, PLAYER2, points} from \"../utils\";\n\n\nconst initialState = {\n    isMatchOver: false,\n    maxSetNumber: 3,\n    commentatorMessage: \"The Match starts!!!\",\n    player1: {\n        id: 0,\n        gameScore: 0,\n        setScore: [0]\n    },\n    player2: {\n        id: 0,\n        gameScore: 0,\n        setScore: [0]\n    }\n};\n\n/**\n * We increment the game score 1 by 1 making use of the POINTS constant ([\"0\", \"15\", \"30\", \"40\", \"add\"])\n * @param state\n * @param action\n * @returns {{player1: {id: number, gameScore: number, setScore: [number]}, player2: {id: number, gameScore: number, setScore: [number]}}}\n */\nexport function match(state = initialState, action) {\n    let copy = {};\n    const {playerOrder, increment, message} = action;\n    const player = \"player\" + playerOrder;\n    switch (action.type) {\n\n        case RESET_GAME_SCORES:\n            copy = {...state};\n            copy.player1.gameScore = 0;\n            copy.player2.gameScore = 0;\n            return copy;\n        case HANDLE_GAME_POINT:\n            copy = {...state};\n            copy[player].gameScore += increment;\n            return copy;\n\n        case ADD_SET_SCORE:\n            copy = JSON.parse(JSON.stringify(state));\n            const length = copy[player].setScore.length;\n            copy[player].setScore[length - 1] += increment;\n            return copy;\n\n        case ADD_NEW_SETS:\n            copy = JSON.parse(JSON.stringify(state));\n            copy[PLAYER1].setScore.push(0);\n            copy[PLAYER2].setScore.push(0);\n            return copy;\n\n        case END_MATCH:\n            copy = {...state};\n            copy.isMatchOver = true;\n            return copy;\n\n        case ADD_COMMENTATOR_MESSAGE:\n            return {...state, commentatorMessage: message};\n\n        case CHANGE_GAME_MODE:\n            copy = {...state};\n            if (copy.maxSetNumber === 3) {\n                copy.maxSetNumber = 5\n            } else if (copy.maxSetNumber === 5) {\n                copy.maxSetNumber = 3\n            }\n            return copy;\n        case RESET_MATCH:\n            copy = JSON.parse(JSON.stringify(initialState));\n            copy.maxSetNumber = state.maxSetNumber;\n            return copy;\n\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from 'redux'\nimport {players} from \"./players\";\nimport {match} from \"./match\";\n\nconst rootReducer = combineReducers({\n    players: players,\n    match : match\n});\nexport default rootReducer;\n","import {createStore, applyMiddleware, compose} from 'redux'\nimport thunk from 'redux-thunk'\nimport {createLogger} from 'redux-logger'\nimport rootReducer from '../reducers'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst logger = createLogger({\n    collapsed: true\n    // ...options\n});\nconst configureStore = preloadedState => createStore(\n    rootReducer,\n    preloadedState,\n    composeEnhancers(\n        applyMiddleware(thunk, logger)\n    )\n);\n\nexport default configureStore\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './Card.css';\n\nclass Card extends React.Component {\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        imgSrc: PropTypes.string.isRequired,\n        subTitle: PropTypes.string,\n    };\n\n    render() {\n        const {name, imgSrc, subTitle} = this.props;\n        return (\n            <div className=\"card\">\n                <img\n                    src={imgSrc}\n                    alt=\"Avatar\" width={150}\n                    height={100}/>\n                <div className=\"container\">\n                    <h4><b>{name}</b></h4>\n                    <p>{subTitle}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport Card from \"../card/Card\";\n\n\nclass Player extends React.Component {\n    static propTypes = {\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        img: PropTypes.string.isRequired,\n        ranking: PropTypes.number.isRequired,\n        isInMatch: PropTypes.bool.isRequired,\n        click: PropTypes.func,\n    };\n\n    render() {\n        const {id, name, img, ranking, isInMatch, click} = this.props;\n        return (\n            <div onClick={() => click ? click(id, isInMatch):null} className=\"player\">\n                <div className=\"player-top\">\n                    <Card name={name} imgSrc={img} subTitle={\"#\" + ranking}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Player\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport Player from \"../player/Player\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport * as playersActions from '../../actions/players'\n\nexport class PlayersContainer extends React.Component {\n\n    static propTypes = {\n        isMatch: PropTypes.bool.isRequired,\n        title: PropTypes.string.isRequired,\n        players: PropTypes.arrayOf(PropTypes.object).isRequired,\n    };\n\n    /**\n     * Handles player click\n     * @param id\n     * @param isInMatch\n     */\n    handleClick = (id = 0, isInMatch) => {\n        const {isMatch, players} = this.props;\n        const playersInMatch = players.filter((player) => player.isInMatch).length;\n\n        if (this.checkIfPlayerMatchStatusShouldBeUpdated(isMatch, isInMatch, playersInMatch)) {\n            this.props.changePlayerStatusMatchActionCreator(id);\n        }\n\n    };\n\n    /**\n     * Check if the status of a player regarding a match can change,\n     * this will happen if the number of players declared in a match is less than two, in such case, the player\n     * will be added to the match, otherwise, he or she will be removed\n     * @param isMatch, is player container in match mode\n     * @param isInMatch, player already in a match\n     * @param players, list of players\n     */\n    checkIfPlayerMatchStatusShouldBeUpdated = (isMatch, isInMatch, players) => {\n        return (!isMatch && players < 2) || (!isMatch && players === 2 && isInMatch)\n    };\n\n\n    render() {\n        const {isMatch, title, players} = this.props;\n        const renderPlayerGrid = (players) =>\n            <ol className=\"players-grid\" style={{justifyContent: isMatch ? \"space-evenly\" : \"center\"}}>\n                {\n                    players.map((player, index) => (\n                        <li style={{opacity: player.isInMatch && !isMatch ? 0.5 : 1}} key={index}>\n                            <Player id={player.id} name={player.name} img={player.img}\n                                    ranking={player.ranking} isInMatch={player.isInMatch}\n                                    click={this.handleClick}/>\n\n\n                        </li>\n\n                    ))\n                }\n            </ol>;\n        const renderEmptyPlayersMessage = (isMatch) => {\n            const title = isMatch ? \"Please select two players to start a match\" : \"Add players\";\n            return <div className=\"players-grid\">{title}</div>\n        };\n        return (\n            <div>\n                <div className=\"players-container\">\n                    <h2 className=\"players-container-title\">{title}</h2>\n\n                    <div className=\"players-container-players\">\n                        {\n                            players.length > 0 ?\n                                renderPlayerGrid(players) :\n                                renderEmptyPlayersMessage(isMatch)\n                        }\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators(playersActions, dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(PlayersContainer)\n\n","import React, {Component} from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from 'react-redux'\nimport './App.css';\nimport PlayersContainer from \"../../components/players_container/PlayersContainer\";\nimport * as playersActions from '../../actions/players'\nimport Link from \"react-router-dom/Link\";\n\nexport class App extends Component {\n\n    render() {\n        const {players} = this.props;\n        const playersForMatch = players ? players.filter((player) => player.isInMatch) : [];\n\n        return (\n            <div className=\"list-players\">\n                <div className=\"list-players-title\">\n                    <h1>Tennis Game</h1>\n                </div>\n                <div className=\"list-players-content\">\n                    <div>\n                        <PlayersContainer title={\"Players\"} isMatch={false} players={players}/>\n                    </div>\n\n                    <div>\n\n                        <PlayersContainer title={\"Match\"} isMatch={true} players={playersForMatch}/>\n                        {\n                            playersForMatch.length > 1 && (\n                                <div className=\"open-start-match\">\n                                    <Link\n                                        to=\"/match\"\n                                        className=\"open-start-match\"\n                                    >Start Match</Link>\n                                </div>\n                            )\n                        }\n\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        players: state.players.players\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators(playersActions, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass ScoreDisp extends React.Component {\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        sets: PropTypes.array.isRequired,\n        gameScore: PropTypes.string,\n    };\n\n    render() {\n        const {name, sets, gameScore} = this.props;\n        return (\n            <div>\n                <table>\n                    <tr>\n                        <th style={{width: \"200px\"}}>{name}</th>\n                        {\n                            sets.map((set, index) => (\n                                <th key={index} style={{width: \"30px\"}}>{set}</th>\n                            ))\n                        }\n                        <th className={\"counter-game\"} style={{width: \"30px\",border:\"1px solid black\"}}>{gameScore}</th>\n                    </tr>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default ScoreDisp\n","import React, {Component} from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from 'react-redux'\nimport '../app/App.css';\nimport './Match.css'\nimport Player from \"../../components/player/Player\";\nimport * as matchActions from \"../../actions/match\";\nimport {\n    checkDeuce,\n    checkTieBreak,\n    getMessage,\n    playerWonGame,\n    playerWonMatch,\n    playerWonSet,\n    points\n} from \"../../utils\";\nimport ScoreDisp from \"../../components/score_disp/ScoreDisp\";\nimport ArrowIcon from 'react-icons/lib/md/arrow-back'\n\nexport class Match extends Component {\n\n    /**\n     * Go back to main page\n     */\n    goBack = () => {\n        this.props.history.push('/')\n    };\n\n    /**\n     * Continue with game\n     * @param p1Order, current player order (1 or 2)\n     * @param p1GameScore, current player Score\n     * @param p2Order, opponent order (1 or 3)\n     * @param p2GameScore opponent score\n     * @param isPlayerInTieBreak, if there is a tie break\n     */\n    continueGame = (p1Order, p1GameScore, p2Order, p2GameScore, isPlayerInTieBreak) => {\n        if (checkDeuce(p1GameScore, p2GameScore) && !isPlayerInTieBreak) {\n            this.props.handleGamePointActionCreator(p2Order, -1);\n        } else {\n            this.props.handleGamePointActionCreator(p1Order, 1);\n        }\n    };\n\n    /**\n     * Continue with set\n     * @param order\n     */\n    continueSet = (order) => {\n        this.props.addSetScoreActionCreator(order, 1);\n    };\n\n    /**\n     * Gets number of sets won by each player taking into account sets won by tie break\n     * @param p1SetScores\n     * @param p2SetScores\n     * @param currentSet\n     * @returns {{swp2: *, swp1: *}}\n     */\n    getPlayersWonSets = (p1SetScores, p2SetScores, currentSet) => {\n        // swp1 = sets won by player 1\n        // swp2 = sets won by player 2\n        const setsWonP1 = p1SetScores.filter((set, index) => {\n            const setScore = index === (currentSet - 1) ? set + 1 : set;\n            return setScore >= 6 && p2SetScores[index] !== 7\n        }).length;\n        const setsWonP2 = p2SetScores.filter((set, index) => set >= 6 && p1SetScores[index] !== 7).length;\n        return {setsWonP1, setsWonP2}\n    };\n\n    /**\n     * Handles the logic when a player wins a point, if the player has not won the game yet\n     * then his or her score and increment. However, if the player has not won the game but it\n     * will win the deuce, then the opponent score will decrement (from add to 40)\n     * @param order : If it is player 1 or player 2\n     */\n    winPoint = (order) => {\n        const {isMatchOver, maxSetNumber} = this.props; // Check if match is over\n        const playerScore = this.props[\"player\" + order]; // Get scores of current player\n        const opponent = order === 1 ? 2 : 1; // Get order of oponent (1 or 2)\n        const opponentScore = this.props[\"player\" + opponent]; // Get scores of opponent\n        const currentSet = playerScore.setScore.length; // Get the number of the current set being played\n        const isPlayerInTieBreak = checkTieBreak(playerScore.setScore[currentSet - 1], opponentScore.setScore[currentSet - 1]); //Check if there is a tie break\n        const playerName = this.props.showPlayers[order - 1].name; // Current player name\n        let message = \"\"; // Message for comentator\n        if (!isMatchOver) {\n            if (!playerWonGame(isPlayerInTieBreak ? playerScore.gameScore + 1 : playerScore.gameScore, opponentScore.gameScore, isPlayerInTieBreak)) { //Check if player won current game (normal or tiebreak)\n                message = getMessage(playerName);\n                this.props.addCommentatorMessageActionCreator(message);\n                this.continueGame(order, playerScore.gameScore, opponent, opponentScore.gameScore, isPlayerInTieBreak)\n            } else { // Player won the game\n                message = playerName + \" Won the game!!\";\n                this.props.addCommentatorMessageActionCreator(message);\n                if (!playerWonSet(playerScore.setScore[currentSet - 1] + 1, opponentScore.setScore[currentSet - 1]) && !isPlayerInTieBreak) { // Check if player won the set, if he or she wins a tie break game then the set is won.\n                    this.continueSet(order)\n                } else { // Player won set\n                    message = playerName + \" # Won the set \" + currentSet + \"\";\n                    this.props.addCommentatorMessageActionCreator(message);\n                    const {setsWonP1, setsWonP2} = this.getPlayersWonSets(playerScore.setScore, opponentScore.setScore, currentSet);\n                    if (!playerWonMatch(setsWonP1, setsWonP2, maxSetNumber)) { // Check if player won match\n                        this.props.addSetScoreActionCreator(order, 1);\n                        this.props.addNewSetsActionCreator();\n                    } else { // Player won match\n                        message = playerName + \" Won the match!!\";\n                        console.log(message);\n                        this.props.addCommentatorMessageActionCreator(message);\n                        this.props.addSetScoreActionCreator(order, 1);\n                        this.props.endMatchActionCreator();\n                    }\n                }\n                this.props.resetGameScoresActionCreator();\n\n            }\n        }\n    };\n\n    componentDidMount() {\n        this.props.resetMatch()\n    }\n\n    render() {\n        const {showPlayers, player1, player2, maxSetNumber, isMatchOver} = this.props;\n        const showPlayer1 = showPlayers[0] || {};\n        const showPlayer2 = showPlayers[1] || {};\n        const currentSet = player1.setScore.length;\n        const isPlayerInTieBreak = checkTieBreak(player1.setScore[currentSet - 1], player2.setScore[currentSet - 1]);\n        const {setsWonP1, setsWonP2} = this.getPlayersWonSets(player1.setScore, player2.setScore, currentSet);\n\n        const renderPlayer = (player, hasWon, order, isMatchOver) => {\n            return (\n\n                <div style={{opacity: !hasWon && isMatchOver ? '0.5' : '1'}}>\n                    <Player id={player.id} name={player.name} img={player.img}\n                            ranking={player.ranking} isInMatch={player.isInMatch}/>\n\n                    <button className={\"win-point-button\"} onClick={() => this.winPoint(order)}>Win\n                        Point\n                    </button>\n                </div>\n            )\n        };\n\n\n        return (\n            <div>\n                <div className=\"list-players\">\n                    <div className=\"match-list-players-title\">\n                        <span><span onClick={this.goBack} className={\"back-icon\"}><ArrowIcon size={30}/></span><h1\n                            className={\"title-match\"}>Match!</h1></span>\n                    </div>\n                    {\n                        showPlayers.length > 0 && (\n                            <div className=\"match-container\">\n                                <div className=\"players\">\n                                    {\n                                        renderPlayer(showPlayer1, playerWonMatch(setsWonP1, setsWonP2, maxSetNumber), 1, isMatchOver)\n                                    }\n\n                                    <h1>VS</h1>\n                                    {\n                                        renderPlayer(showPlayer2, playerWonMatch(setsWonP2, setsWonP1, maxSetNumber), 2, isMatchOver)\n                                    }\n                                </div>\n\n                            </div>\n                        )\n                    }\n\n                </div>\n                {\n                    showPlayers.length > 0 && (\n                        <div className={\"score-board-container\"}>\n                            <ScoreDisp name={showPlayer1.name}\n                                       gameScore={!isPlayerInTieBreak ? points[player1.gameScore] : player1.gameScore.toString()}\n                                       sets={player1.setScore}/>\n                            <ScoreDisp name={showPlayer2.name}\n                                       gameScore={!isPlayerInTieBreak ? points[player2.gameScore] : player2.gameScore.toString()}\n                                       sets={player2.setScore}/>\n                        </div>\n                    )\n                }\n\n                <div className={\"commentator\"}>\n                    {/*<b>Commentator :</b> {this.props.commentatorMessage}*/}\n                    <img width={70} height={70}\n                         src={\"https://www.shropshirestar.com/resizer/zqq449m6kEyRxwev_n_O9oKayRo=/1000x0/filters:quality(100)/arc-anglerfish-arc2-prod-shropshirestar-mna.s3.amazonaws.com/public/STRMTKBX3FBMXNKPJVPECJ6PSM.jpg\"}\n                         alt=\"\"/> <span\n                    className={\"commentator-message\"}>{showPlayers.length > 0 ? this.props.commentatorMessage : \"There are no players selected for the match!\"}</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators(matchActions, dispatch)\n}\n\nfunction mapStateToProps(state) {\n    return {\n        showPlayers: state.players.players.filter((player) => player.isInMatch),\n        player1: state.match.player1,\n        player2: state.match.player2,\n        isMatchOver: state.match.isMatchOver,\n        maxSetNumber: state.match.maxSetNumber,\n        commentatorMessage: state.match.commentatorMessage\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Match)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Provider} from 'react-redux'\nimport {Route} from 'react-router-dom'\nimport App from \"./app/App\";\nimport Switch from \"react-router/Switch\";\nimport Match from \"./match/Match\";\n\n\nconst Root = ({store}) => (\n    <Provider store={store}>\n        <Switch>\n            <Route exact path=\"/\" component={App}/>\n            <Route path=\"/match\" render={({history}) => (\n                <Match history={history}/>\n            )}/>\n        </Switch>\n\n    </Provider>\n);\n\nRoot.propTypes = {\n    store: PropTypes.object.isRequired,\n};\nexport default Root\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport configureStore from \"./store/configureStore\";\nimport Root from \"./containers/Root\";\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Router>\n        <Root store={store}/>\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}